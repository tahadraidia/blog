<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Taha Draidia</title>
    <link>https://tahadraidia.com/posts/</link>
    <description>Recent content on Taha Draidia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Dec 2021 13:34:28 +0000</lastBuildDate><atom:link href="https://tahadraidia.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Alternative to JMP ESP Instruction</title>
      <link>https://tahadraidia.com/posts/alternative-to-jmp-esp/</link>
      <pubDate>Sun, 12 Dec 2021 13:34:28 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/alternative-to-jmp-esp/</guid>
      <description>When it comes to vanilla buffer overflow, JMP ESP instruction is the one you look for when you got control over EIP register.
Now let&amp;rsquo;s assume that DEP is not enabled and due to ASLR and/or JMP ESP addresses contains bad characters, which make those address impossible to use.
We can look for the following assembly instructions instead:
 PUSH ESP; RET (54C3)  0:012&amp;gt; u 77c73989 ntdll!ResCDirectoryValidateEntries+0x1805: 77c73989 54 push esp 77c7398a c3 ret  CALL ESP; (FFD4)  0:012&amp;gt; u 77c77254 ntdll!</description>
    </item>
    
    <item>
      <title>Don&#39;t Go Phishing Blind, Watch While RunTime</title>
      <link>https://tahadraidia.com/posts/dont-go-phising-blind-watch-while-execution/</link>
      <pubDate>Sat, 04 Dec 2021 11:25:46 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/dont-go-phising-blind-watch-while-execution/</guid>
      <description>Raise your hand if you crafted well your payload and the payload worked well in your lab machines but in the real scenario you&amp;rsquo;re not receiving the callback! I guess all of us at some point have experienced this.
To solve this I wrote a simple and yet effective set of functions that allow us to see what going on while the runtime of our script.
The first function/subroutine, which I called hello simply sends an GET request to a specified server.</description>
    </item>
    
    <item>
      <title>Identify Weak Service Configuration With One Liner of Powershell</title>
      <link>https://tahadraidia.com/posts/identify-weak-service-configuration-with-oneliner-of-powershell/</link>
      <pubDate>Fri, 03 Dec 2021 09:48:14 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/identify-weak-service-configuration-with-oneliner-of-powershell/</guid>
      <description>One of the features of PEN300 MSF script is lazy privilege escalation, it checks for few common excessive permissions and lack of configuration in certain component of the box.
The missing part was how to identify weak service configuration? the approach was already known, however how to achieve it using MSF Ruby API or Win32 API seemed doomed. MSF Windows Services class relies on sc_manager, this won&amp;rsquo;t work with low privileged user.</description>
    </item>
    
    <item>
      <title>Automate the Reconnaissance Phase</title>
      <link>https://tahadraidia.com/posts/automate-the-reconnaissance-phase/</link>
      <pubDate>Thu, 02 Dec 2021 07:43:03 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/automate-the-reconnaissance-phase/</guid>
      <description>If you have been reading my OSEP (PEN300) post series, you know that I love automating things, reconnaissance phase is one of the repetitive tasks that you do for each machine you compromise right.
In this post, I am going to share with you how I took advantage of the existing scripts and tools to create let&amp;rsquo;s say a reconnaissance script bundle.
The script is written into Powershell, the language has a rich API and special when it allow us to load .</description>
    </item>
    
    <item>
      <title>Added RunAsPPL Check to Our PEN300 MSF Script</title>
      <link>https://tahadraidia.com/posts/added-runasppl-check-to-our-pen300-msf-script/</link>
      <pubDate>Wed, 01 Dec 2021 10:21:33 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/added-runasppl-check-to-our-pen300-msf-script/</guid>
      <description>While running some test this morning and stumbled on the following error:
Could not execute auto: Rex::Post::Meterpreter::RequestError priv_passwd_get_sam_hashes: Operation failed: The parameter is incorrect. This occurred while executing right after enabling restricted admin in our MSF script as show in the screenshot.
There are two important points we need to discuss here, first when the error happened, it was not handle hence, the script stop running, this bad.
The second point is what could go wrong right?</description>
    </item>
    
    <item>
      <title>Taking Advantage of Assembly.GetManifestResourceStream for Quick Dirt Hacks</title>
      <link>https://tahadraidia.com/posts/taking-advantage-of-assembly.getmanifestresourcestream-for-quick-dirt-hacks/</link>
      <pubDate>Wed, 01 Dec 2021 04:32:52 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/taking-advantage-of-assembly.getmanifestresourcestream-for-quick-dirt-hacks/</guid>
      <description>We all get lazy from time to time, but things need to be done, in this post I am going to share with you a dirty hack that I used to avoid translating a solution written in a X programming language to another programming language. The scenario that we are going to cover here is that let&amp;rsquo;s say we wrote a piece of code that does something but requires another tool to achieve the next step of the aimed goal.</description>
    </item>
    
    <item>
      <title>Make SharpRDP a .NET Assembly Loadable</title>
      <link>https://tahadraidia.com/posts/make-sharprdp-an-assembly-loadable/</link>
      <pubDate>Mon, 29 Nov 2021 07:21:19 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/make-sharprdp-an-assembly-loadable/</guid>
      <description>SharpRDP in a neat tool when it comes to get a command execution via RDP protocol, The project is written in C# .NET, which makes perfect to leverage .NET Assembly, however, in order to load an assembly the binary needs to expose the API and in this case SharpRDP is build in away that it can only be in traditional way.
If we look at the source code of the project on github, we can clearly see that Program class has internal attributes and the two methods have private attribute.</description>
    </item>
    
    <item>
      <title>A Class Helper for Metasploit Powershell Extension</title>
      <link>https://tahadraidia.com/posts/write-a-class-helper-for-metasploit-powershell-extension/</link>
      <pubDate>Sun, 28 Nov 2021 15:43:16 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/write-a-class-helper-for-metasploit-powershell-extension/</guid>
      <description>Three weeks ago or so I started writing a MSF script that automates repeated tasks such running reconnaissance scripts, dumping credentials, listing tokens that could be impersonated and so on.
The current script does all what I have listed above among other things, however, some part of the code generates Powershell cradles and executes Powershell commands, I would say that this is not an elegant way to do it.
For instance, here are two examples where I run Powershell commands:</description>
    </item>
    
    <item>
      <title>Build an Atomic Windows Lab</title>
      <link>https://tahadraidia.com/posts/build-an-atomic-windows-lab/</link>
      <pubDate>Thu, 25 Nov 2021 15:32:12 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/build-an-atomic-windows-lab/</guid>
      <description>I have decided to build a Windows virtual machine to run some test scenarios with the goal to automate the repetitive tasks we encounter during an engagement.
In the nutshell we are going to build a vulnerable Non-Domain Windows machine with different escalation paths including weak configuration service and Always Install Elevated enabled with some defenses on such as Windows Defender (LOL) and Powershell restricted language to make a bit challenging, or should I say interesting.</description>
    </item>
    
    <item>
      <title>Let&#39;s build a Python module in C</title>
      <link>https://tahadraidia.com/posts/python-c-module/</link>
      <pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/python-c-module/</guid>
      <description>Background Python is one of the most used programming language nowadays specially due its popularity in data science, deep and machine learning fields; Truth to be told, under the hood there is C and/or C++ code running.
Let&amp;rsquo;s take for example some popular python libraries used in math and machine learn to illustrate that point:
 Numpy (33.2% of the code is written in C) TensorFlow (61% of the code is written in C++) PyTorch (53% of the code in written in C++ and 4% in C)  The raison that these libraries are build in C and/or C++ is for performance issues mainly, also it is important to note that Python is written in C, hence it provides a C API to extend the language by creating new modules at lower-level possible.</description>
    </item>
    
    <item>
      <title>Michał Bentkowski XSS Challenge</title>
      <link>https://tahadraidia.com/posts/micha%C5%82-bentkowski-xss-challenge/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/micha%C5%82-bentkowski-xss-challenge/</guid>
      <description>Back in April, Michał Bentkowski posted an XSS challenge on twitter. So I decided to give this a try and here is my write-up about it.
The first thing that I noticed when I visited the page is that the challenge was served via GitHub Pages. From there, I knew that CSP did not apply to the challenge.
The challenge rules were as follows:
Please enter some HTML. It gets sanitized and inserted to a &amp;lt;div&amp;gt;.</description>
    </item>
    
    <item>
      <title>Delivering more than just presents: An Xmas story of self-XSS on Amazon.com</title>
      <link>https://tahadraidia.com/posts/xmas-amazon-self-xss/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/xmas-amazon-self-xss/</guid>
      <description>It&amp;rsquo;s been a long time since my last blog post, as I was preparing for my OSCP. Well, I&amp;rsquo;m glad to inform you all that I&amp;rsquo;m now an Offensive Security Certified Professional.
In this post, I will walk you through how, in less than five minutes, I found a self-XSS bug on the main Amazon.com website.
It was Chrismas time and a colleague of mine had introduced me to Amazon Prime Video, so I decided to take a look at it.</description>
    </item>
    
    <item>
      <title>OverTheWire&amp;#58; Natas 0-10</title>
      <link>https://tahadraidia.com/posts/on-the-wire-natas-0-10/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/on-the-wire-natas-0-10/</guid>
      <description>Preparing for OSCP, I&amp;rsquo;ve been working through OverTheWire - natas and here is my walktrough for levels 0-10. Natas is a series of insecure webapps, which aim to teach the basics of web security.
The security topics covered in these levels include:
 Editing HTTP headers Editing cookies File inclusion vulnerabilities Bruteforce techniques Command injections  Natas 0 It says that we can find the password for the next level on the page, yet we don&amp;rsquo;t see it, do we ?</description>
    </item>
    
    <item>
      <title>Mr Robot Vulnhub Challenge Walkthrough</title>
      <link>https://tahadraidia.com/posts/mr-robot-boot2root-challenge/</link>
      <pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/mr-robot-boot2root-challenge/</guid>
      <description>I had some extra time this weekend so I decided to play Mr Robot hacking challenge. I heard a lot about that challenge but I didn&amp;rsquo;t have time to hack it. Now was the time. I downloaded the virtual machine image from vulnhub, fired up virtulbox, started kali linux vm.
Enumeration time, I always start with port scanning to see what services are running but to do so I need to find the machine&amp;rsquo;s IP first.</description>
    </item>
    
    <item>
      <title>Bypass Content Security Policy framing restriction rule - OLX</title>
      <link>https://tahadraidia.com/posts/bypass-csp-framing-restriction-rule-olx/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/bypass-csp-framing-restriction-rule-olx/</guid>
      <description>It&amp;rsquo;s been a while since my last post. Today I decided to share with you a bug I found on a public bug bounty program on HackerOne. You can find the original report here.
This post is about a misconfiguration in CSP rule that leaves the website vulnerable to UI redressing aka clickjacking. This attack is widly used by scammer and spammers to trick users.
After some recon on olx.co.za and olx.</description>
    </item>
    
    <item>
      <title>Reflective XSS via angularJS template injection - Hostinger</title>
      <link>https://tahadraidia.com/posts/xss-via-angularjs-template-injection_hostinger/</link>
      <pubDate>Fri, 17 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/xss-via-angularjs-template-injection_hostinger/</guid>
      <description>Introduction This is a write-up of an AngularJS Template Injection I found in the main domain of Hostinger. If you don&amp;rsquo;t know what&amp;rsquo;s client-side template injection I invite you to take a look at those links [1][2]. Please note that this is my first write-up, I hope you&amp;rsquo;ll enjoy it.
It all started when @berkanexo was telling me that he got listed on Hostinger Wall Of Fame so I decided to take a look at their website.</description>
    </item>
    
    <item>
      <title>Hello Blog ! My goals for 2018</title>
      <link>https://tahadraidia.com/posts/git-init-blog/</link>
      <pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/git-init-blog/</guid>
      <description>Hello world, welcome to my little paradise, I&amp;rsquo;m Taha Ibrahim DRAIDIA, I&amp;rsquo;m a software developer interested in application security, binary exploitation, exploit developement, ethical hacking and bug bounties. I never wrote a blog before, this my first time, I hope you&amp;rsquo;ll like my writings. Below are the reasons why I decided to start writing a blog:
 I used to take notes on text files, they got messy I would like to share what I&amp;rsquo;ve learnt along my journey in computers I would like to increase my writing skills I would like to get feed back about my code, researchs and methodologies I would like to feel more connected with people who share the same interests  Here is a list of topics which I&amp;rsquo;ll be writing about:</description>
    </item>
    
  </channel>
</rss>
