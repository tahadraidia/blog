<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Taha Draidia</title>
    <link>https://tahadraidia.com/categories/programming/</link>
    <description>Recent content in Programming on Taha Draidia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Dec 2021 11:25:46 +0000</lastBuildDate><atom:link href="https://tahadraidia.com/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Don&#39;t Go Phishing Blind, Watch While RunTime</title>
      <link>https://tahadraidia.com/posts/dont-go-phising-blind-watch-while-execution/</link>
      <pubDate>Sat, 04 Dec 2021 11:25:46 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/dont-go-phising-blind-watch-while-execution/</guid>
      <description>Raise your hand if you crafted well your payload and the payload worked well in your lab machines but in the real scenario you&amp;rsquo;re not receiving the callback! I guess all of us at some point have experienced this.
To solve this I wrote a simple and yet effective set of functions that allow us to see what going on while the runtime of our script.
The first function/subroutine, which I called hello simply sends an GET request to a specified server.</description>
    </item>
    
    <item>
      <title>Identify Weak Service Configuration With One Liner of Powershell</title>
      <link>https://tahadraidia.com/posts/identify-weak-service-configuration-with-oneliner-of-powershell/</link>
      <pubDate>Fri, 03 Dec 2021 09:48:14 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/identify-weak-service-configuration-with-oneliner-of-powershell/</guid>
      <description>One of the features of PEN300 MSF script is lazy privilege escalation, it checks for few common excessive permissions and lack of configuration in certain component of the box.
The missing part was how to identify weak service configuration? the approach was already known, however how to achieve it using MSF Ruby API or Win32 API seemed doomed. MSF Windows Services class relies on sc_manager, this won&amp;rsquo;t work with low privileged user.</description>
    </item>
    
    <item>
      <title>Automate the Reconnaissance Phase</title>
      <link>https://tahadraidia.com/posts/automate-the-reconnaissance-phase/</link>
      <pubDate>Thu, 02 Dec 2021 07:43:03 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/automate-the-reconnaissance-phase/</guid>
      <description>If you have been reading my OSEP (PEN300) post series, you know that I love automating things, reconnaissance phase is one of the repetitive tasks that you do for each machine you compromise right.
In this post, I am going to share with you how I took advantage of the existing scripts and tools to create let&amp;rsquo;s say a reconnaissance script bundle.
The script is written into Powershell, the language has a rich API and special when it allow us to load .</description>
    </item>
    
    <item>
      <title>Added RunAsPPL Check to Our PEN300 MSF Script</title>
      <link>https://tahadraidia.com/posts/added-runasppl-check-to-our-pen300-msf-script/</link>
      <pubDate>Wed, 01 Dec 2021 10:21:33 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/added-runasppl-check-to-our-pen300-msf-script/</guid>
      <description>While running some test this morning and stumbled on the following error:
Could not execute auto: Rex::Post::Meterpreter::RequestError priv_passwd_get_sam_hashes: Operation failed: The parameter is incorrect. This occurred while executing right after enabling restricted admin in our MSF script as show in the screenshot.
There are two important points we need to discuss here, first when the error happened, it was not handle hence, the script stop running, this bad.
The second point is what could go wrong right?</description>
    </item>
    
    <item>
      <title>Taking Advantage of Assembly.GetManifestResourceStream for Quick Dirt Hacks</title>
      <link>https://tahadraidia.com/posts/taking-advantage-of-assembly.getmanifestresourcestream-for-quick-dirt-hacks/</link>
      <pubDate>Wed, 01 Dec 2021 04:32:52 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/taking-advantage-of-assembly.getmanifestresourcestream-for-quick-dirt-hacks/</guid>
      <description>We all get lazy from time to time, but things need to be done, in this post I am going to share with you a dirty hack that I used to avoid translating a solution written in a X programming language to another programming language. The scenario that we are going to cover here is that let&amp;rsquo;s say we wrote a piece of code that does something but requires another tool to achieve the next step of the aimed goal.</description>
    </item>
    
    <item>
      <title>Make SharpRDP a .NET Assembly Loadable</title>
      <link>https://tahadraidia.com/posts/make-sharprdp-an-assembly-loadable/</link>
      <pubDate>Mon, 29 Nov 2021 07:21:19 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/make-sharprdp-an-assembly-loadable/</guid>
      <description>SharpRDP in a neat tool when it comes to get a command execution via RDP protocol, The project is written in C# .NET, which makes perfect to leverage .NET Assembly, however, in order to load an assembly the binary needs to expose the API and in this case SharpRDP is build in away that it can only be in traditional way.
If we look at the source code of the project on github, we can clearly see that Program class has internal attributes and the two methods have private attribute.</description>
    </item>
    
  </channel>
</rss>
