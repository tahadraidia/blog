<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on Taha Draidia</title>
    <link>https://tahadraidia.com/tags/c#/</link>
    <description>Recent content in C# on Taha Draidia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Dec 2021 07:43:03 +0000</lastBuildDate><atom:link href="https://tahadraidia.com/tags/c#/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automate the Reconnaissance Phase</title>
      <link>https://tahadraidia.com/posts/automate-the-reconnaissance-phase/</link>
      <pubDate>Thu, 02 Dec 2021 07:43:03 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/automate-the-reconnaissance-phase/</guid>
      <description>If you have been reading my OSEP (PEN300) post series, you know that I love automating things, reconnaissance phase is one of the repetitive tasks that you do for each machine you compromise right.
In this post, I am going to share with you how I took advantage of the existing scripts and tools to create let&amp;rsquo;s say a reconnaissance script bundle.
The script is written into Powershell, the language has a rich API and special when it allow us to load .</description>
    </item>
    
    <item>
      <title>Taking Advantage of Assembly.GetManifestResourceStream for Quick Dirt Hacks</title>
      <link>https://tahadraidia.com/posts/taking-advantage-of-assembly.getmanifestresourcestream-for-quick-dirt-hacks/</link>
      <pubDate>Wed, 01 Dec 2021 04:32:52 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/taking-advantage-of-assembly.getmanifestresourcestream-for-quick-dirt-hacks/</guid>
      <description>We all get lazy from time to time, but things need to be done, in this post I am going to share with you a dirty hack that I used to avoid translating a solution written in a X programming language to another programming language. The scenario that we are going to cover here is that let&amp;rsquo;s say we wrote a piece of code that does something but requires another tool to achieve the next step of the aimed goal.</description>
    </item>
    
    <item>
      <title>Make SharpRDP a .NET Assembly Loadable</title>
      <link>https://tahadraidia.com/posts/make-sharprdp-an-assembly-loadable/</link>
      <pubDate>Mon, 29 Nov 2021 07:21:19 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/make-sharprdp-an-assembly-loadable/</guid>
      <description>SharpRDP in a neat tool when it comes to get a command execution via RDP protocol, The project is written in C# .NET, which makes perfect to leverage .NET Assembly, however, in order to load an assembly the binary needs to expose the API and in this case SharpRDP is build in away that it can only be in traditional way.
If we look at the source code of the project on github, we can clearly see that Program class has internal attributes and the two methods have private attribute.</description>
    </item>
    
  </channel>
</rss>
