<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Privilege Escalation on Taha Draidia</title>
    <link>https://tahadraidia.com/tags/privilege-escalation/</link>
    <description>Recent content in Privilege Escalation on Taha Draidia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Dec 2021 09:48:14 +0000</lastBuildDate><atom:link href="https://tahadraidia.com/tags/privilege-escalation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Identify Weak Service Configuration With One Liner of Powershell</title>
      <link>https://tahadraidia.com/posts/identify-weak-service-configuration-with-oneliner-of-powershell/</link>
      <pubDate>Fri, 03 Dec 2021 09:48:14 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/identify-weak-service-configuration-with-oneliner-of-powershell/</guid>
      <description>One of the features of PEN300 MSF script is lazy privilege escalation, it checks for few common excessive permissions and lack of configuration in certain component of the box.
The missing part was how to identify weak service configuration? the approach was already known, however how to achieve it using MSF Ruby API or Win32 API seemed doomed. MSF Windows Services class relies on sc_manager, this won&amp;rsquo;t work with low privileged user.</description>
    </item>
    
    <item>
      <title>Build an Atomic Windows Lab</title>
      <link>https://tahadraidia.com/posts/build-an-atomic-windows-lab/</link>
      <pubDate>Thu, 25 Nov 2021 15:32:12 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/build-an-atomic-windows-lab/</guid>
      <description>I have decided to build a Windows virtual machine to run some test scenarios with the goal to automate the repetitive tasks we encounter during an engagement.
In the nutshell we are going to build a vulnerable Non-Domain Windows machine with different escalation paths including weak configuration service and Always Install Elevated enabled with some defenses on such as Windows Defender (LOL) and Powershell restricted language to make a bit challenging, or should I say interesting.</description>
    </item>
    
  </channel>
</rss>
