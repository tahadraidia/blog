<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Taha Draidia</title>
    <link>https://tahadraidia.com/tags/ruby/</link>
    <description>Recent content in Ruby on Taha Draidia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Dec 2021 09:48:14 +0000</lastBuildDate><atom:link href="https://tahadraidia.com/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Identify Weak Service Configuration With One Liner of Powershell</title>
      <link>https://tahadraidia.com/posts/identify-weak-service-configuration-with-oneliner-of-powershell/</link>
      <pubDate>Fri, 03 Dec 2021 09:48:14 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/identify-weak-service-configuration-with-oneliner-of-powershell/</guid>
      <description>One of the features of PEN300 MSF script is lazy privilege escalation, it checks for few common excessive permissions and lack of configuration in certain component of the box.
The missing part was how to identify weak service configuration? the approach was already known, however how to achieve it using MSF Ruby API or Win32 API seemed doomed. MSF Windows Services class relies on sc_manager, this won&amp;rsquo;t work with low privileged user.</description>
    </item>
    
    <item>
      <title>Automate the Reconnaissance Phase</title>
      <link>https://tahadraidia.com/posts/automate-the-reconnaissance-phase/</link>
      <pubDate>Thu, 02 Dec 2021 07:43:03 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/automate-the-reconnaissance-phase/</guid>
      <description>If you have been reading my OSEP (PEN300) post series, you know that I love automating things, reconnaissance phase is one of the repetitive tasks that you do for each machine you compromise right.
In this post, I am going to share with you how I took advantage of the existing scripts and tools to create let&amp;rsquo;s say a reconnaissance script bundle.
The script is written into Powershell, the language has a rich API and special when it allow us to load .</description>
    </item>
    
    <item>
      <title>Added RunAsPPL Check to Our PEN300 MSF Script</title>
      <link>https://tahadraidia.com/posts/added-runasppl-check-to-our-pen300-msf-script/</link>
      <pubDate>Wed, 01 Dec 2021 10:21:33 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/added-runasppl-check-to-our-pen300-msf-script/</guid>
      <description>While running some test this morning and stumbled on the following error:
Could not execute auto: Rex::Post::Meterpreter::RequestError priv_passwd_get_sam_hashes: Operation failed: The parameter is incorrect. This occurred while executing right after enabling restricted admin in our MSF script as show in the screenshot.
There are two important points we need to discuss here, first when the error happened, it was not handle hence, the script stop running, this bad.
The second point is what could go wrong right?</description>
    </item>
    
    <item>
      <title>A Class Helper for Metasploit Powershell Extension</title>
      <link>https://tahadraidia.com/posts/write-a-class-helper-for-metasploit-powershell-extension/</link>
      <pubDate>Sun, 28 Nov 2021 15:43:16 +0000</pubDate>
      
      <guid>https://tahadraidia.com/posts/write-a-class-helper-for-metasploit-powershell-extension/</guid>
      <description>Three weeks ago or so I started writing a MSF script that automates repeated tasks such running reconnaissance scripts, dumping credentials, listing tokens that could be impersonated and so on.
The current script does all what I have listed above among other things, however, some part of the code generates Powershell cradles and executes Powershell commands, I would say that this is not an elegant way to do it.
For instance, here are two examples where I run Powershell commands:</description>
    </item>
    
  </channel>
</rss>
